#!/opt/lampp/bin/php
<?php

use MatthiasMullie\Minify\Minify;

$PROGRAM_ROOT = "/web/programs/abuilder";

$DIR = getcwd();

function Green($text){ return "\e[1;32m". $text . "\e[0m";}
function Red($text){ return "\e[1;31m". $text . "\e[0m";}
function Yellow($text){ return "\e[1;33m". $text . "\e[0m";}

function ShowHelp(){
  global $PROGRAM_ROOT;
  echo "\tabuilder ".Green("--help | -h")."    Show Help \n";
  echo "\tabuilder ".Green("-p")."             Show installed plugins\n";
  echo file_get_contents($PROGRAM_ROOT."/plugins/docs.ab");
  exit();
}
/// ARGUMENT LISTENER
if($argc>1 && ($argv[1]=="--help" || $argv[1]=="-h") ){
  echo "abuilder \n";
  ShowHelp();
}

if($argc==2 && ($argv[1]=="-p")){
  $ps = scandir($PROGRAM_ROOT."/plugins");
  echo "Installed Plugins :\n";
  foreach ($ps as $p) {
    if($p!=".." && $p!="."){
      echo "\t".$p."\n";
    }
  }
  exit();
}

$abuilderFile="abuilder.ab";
if($argc==2){
  $abuilderFile = $argv[1];
}

$options;
if( !startsWith($abuilderFile,"/") && file_exists($DIR."/".$abuilderFile)){
  $options = file_get_contents($DIR."/".$abuilderFile);
}else if( startsWith($abuilderFile,"/") && file_exists($abuilderFile)){
  $options = file_get_contents($abuilderFile);
}else{
  if($argc>1){
    $options = file_get_contents($PROGRAM_ROOT."/plugins/".$argv[1].".ab");
    file_put_contents($DIR."/".$abuilderFile,$options);
    echo $argv[1]." Plugin installed.\n";
    exit();
  }else{
    echo "abuilder.ab not found \n";
    ShowHelp();
  }
}

// DETECT PARAMETERS
$PARAMETERS=array();
foreach ($argv as $key => $value) {
  if(strpos($value,"=")>-1){
    $vars = explode("=",$value);
    $vars = array_map(function($e){return trim($e);},$vars);
    $PARAMETERS[$vars[0]] = $vars[1];
  }
}

require_once $PROGRAM_ROOT . '/minify/src/Minify.php';
require_once $PROGRAM_ROOT . '/minify/src/JS.php';
require_once $PROGRAM_ROOT . '/minify/src/Exception.php';
include_once $PROGRAM_ROOT."/minify.php";

function minify_minify_js($code){
  
  $minify = new MatthiasMullie\Minify\JS();
  $minify->add($code);
  $return = $minify->minify();
  return $return;
  //return str_replace("\n","",$return);
}

//$options = preg_replace("/^#(.*)/m","",$options);
//$lines=array_filter($lines,function($e){ return trim($e) != ""; });
//$lines=array_map(function($e){return trim($e);},$lines);
$lines = explode("\n",$options);
$lines = array_values($lines);
$options = join("\n",$lines);



function startsWith($string, $search){
  $length = strlen($search);return (substr($string, 0, $length) === $search);
}
function endsWith($string, $search){
  $length = strlen($search);if ($length == 0) {return true;}
  return (substr($string, -$length) === $search);
}


$line=0;

for ($line=0; $line < count($lines); $line++) { 
  $code = trim($lines[$line]);
  Cmd($code);
}

file_put_contents( $abuilderFile , join("\n",$lines) );


//// EXCEPTION
function exception_error_handler($errno, $errstr, $errfile, $errline ) {
  global $error_code,$line;
  echo Red("ERROR:  "). Yellow($line)."\t" . $error_code . "\n$errstr" . "\n";
  //throw new ErrorException($errstr, $errno, 0, $errfile, $errline);
}
set_error_handler("exception_error_handler");

$error_code="";
$start_comment=false;
function Cmd($code){
  set_error_handler("exception_error_handler");
  global $lines,$line,$PARAMETERS,$DIR,$error_code,$start_comment,$PROGRAM_ROOT;
  $error_code = $code;
  if(startsWith($code,"/*")){
    $start_comment=true;
  }
  if(endsWith($code,"*/")){
    $start_comment=false;
    return "";
  }
  if($start_comment){
    return "";
  }
  
  if(startsWith(trim($code),"#")) return "";
  if(trim($code)=="") return "";
    
  $code = CmdEval($code);

  if( startsWith($code,"file ") ){
    // file
    preg_match("/file ([^{]*)/",$code,$mat);
    $fileName=trim($mat[1]);
    $fileContent = "";
    while( ($code=trim($lines[++$line]) )!= "}" ){
      $fileContent .= Cmd($code);
    }
    file_put_contents($fileName,$fileContent);
  }else if( startsWith($code,"version ") ){
    // version
    $version = explode( "." , substr($code,8) );
    $version[count($version)-1] = intval( $version[count($version)-1] ) + 1;
    $lines[$line] = "version ". join(".",$version);
  }else if( startsWith($code , "replace") ){
    // replace;
    preg_match("/replace ([^\,]+),([^{]+)/",$code,$mat);
    $from = trim($mat[1]);
    $to   = trim($mat[2]);
    $return="";
    while( ($code=trim($lines[++$line]) )!= "}" ){
      $return .= Cmd($code);
    }
    return str_replace($from,$to,$return);
  }else if( startsWith($code , "parameters") ){
    $params = explode(",",substr($code,strlen("parameters")));
    $params = array_map(function($e){return trim($e);},$params);
    foreach ($params as $value) {
      if(strpos($value,"=")>-1){
        $vars = explode("=",$value);
        $vars = array_map(function($e){return trim($e);},$vars);
        if(!array_key_exists($vars[0],$PARAMETERS)){
          $PARAMETERS[$vars[0]] = $vars[1];
        }
      }
    }
  }else if(startsWith($code,"minify-js")){
    $return="";
    while( ($code=trim($lines[++$line]) )!= "}" ){
      $return .= Cmd($code);
    }
    return minify_minify_js($return);
  }else if(startsWith($code,"minify-css")){
    $return="";
    while( ($code=trim($lines[++$line]) )!= "}" ){
      $return .= Cmd($code);
    }
    return minify_css($return);
  }else if( startsWith($code,"symlink")){
    // symlink
    preg_match("/symlink ([^\,]+),([^{]+)/",$code,$mat);
    $from = trim($mat[1]);
    $to   = $DIR."/".trim($mat[2]);
    if(file_exists($to)) {
      unlink($to);
    }
    //echo Yellow($from) . "-->" . Yellow($to) . "\n";
    symlink($from,$to);
  }else if( startsWith($code,"mkdir")){
    // mkdir
    preg_match("/mkdir\s+(.*)/",$code,$mat);
    $folder   = $DIR."/".trim($mat[1]);
    if(!file_exists($folder)) {
      mkdir($folder,0777,true);
    }
  }else if(startsWith($code,"shell")){
    //shell
    $return="";
    while( ($code=trim($lines[++$line]) )!= "}" ){
      echo "shell:: ". $code . "\n";
      $return .= exec($code);
    }
    //echo Green( $return );
    //exit();
    return $return;
  }else if(startsWith($code,"abuilder")){
    //abuilder
    $file = trim(substr($code,8));
    $cmd = $PROGRAM_ROOT."/abuilder ".$DIR."/".$file ;
    echo "abuilder> ".$file."\n";
    exec($cmd);
    return "";
  }else{
    return CmdFile($code);
  }


}



function CmdFile($code){
  if($code=="{") return "";
  
  if( startsWith($code,"-") )
    return "\n".substr($code,1)."\n";
  
  if( startsWith($code,">") )
    return substr($code,1);
  
  return file_get_contents($code);
}

function CmdEval($code){
  global $PARAMETERS;
  preg_match("/\{\{([^}]+)\}\}/",$code,$mat);
  while ($mat) {
    if(array_key_exists(trim($mat[1]),$PARAMETERS)){
      $code = str_replace( $mat[0], $PARAMETERS[trim($mat[1])] , $code );
    }else{
      //$code = str_replace($mat[0],$mat[1] ,$code);
      echo "Error: {{".trim($mat[1])."}} Paramter not given.\n";
      return $code;
    }

    preg_match("/\{\{([^}]+)\}\}/",$code,$mat);
  }
  return $code;
}








